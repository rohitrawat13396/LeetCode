# 239. Sliding Window Maximum
# Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.

# Follow up:
# Could you solve it in linear time?

# Example:

# Input: nums = [1,3,-1,-3,5,3,6,7], and k = 3
# Output: [3,3,5,5,6,7] 

class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        
        Q = deque()
        sol = []
        for i  in range(k):
            
            while Q  and nums[i] >= nums[Q[-1]]:
                Q.pop()
            Q.append(i)
            
        for i in range(k,len(nums)): 
            
            sol.append(nums[Q[0]])            
            while Q and Q[0] <= i-k:
                Q.popleft()
            while Q and nums[i] >= nums[Q[-1]]:
                Q.pop()
            Q.append(i)
            
        sol.append(nums[Q[0]])
        
        return sol
