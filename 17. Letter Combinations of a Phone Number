# 17. Letter Combinations of a Phone Number
# Example:

# Input: "23"
# Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
# i = 0
class Solution:
    
    def letterCombinations(self, digits: str) -> List[str]:
        phone = {'2': ["a","b","c"],
                '3': ["d","e","f"],
                '4': ["g","h","i"],
                '5': ["j","k","l"],
                '6': ["m","n","o"],
                '7': ["p","q","r","s"],
                '8': ["t","u","v"],
                '9': ["w","x","y","z"],}
       
        '''def backtrack(comb,next_digits):
            global i
            if len(next_digits)==0:
                output.append(comb)
                print(i,'comb',comb)
                i+=1
            else:
                print(i,next_digits[0])
                i+=1
                for letter in phone[next_digits[0]]:
                    backtrack(comb+letter,next_digits[1:])
                    print(i,comb+letter,next_digits)
                    i+=1
        output = []

        if digits:
            backtrack("",digits)
        return output'''
        def backtrack(comb,next_digits):
            if len(next_digits)==0:
                output.append(comb)
            else:
                for letter in phone[next_digits[0]]:
                    backtrack(comb+letter,next_digits[1:])
        
        output = []
        if digits:
            backtrack('',digits)
            return output
    
    
            
    
            
                
