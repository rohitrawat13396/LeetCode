# 315. Count of Smaller Numbers After Self
# Example 1:

# Input: nums = [5,2,6,1]
# Output: [2,1,1,0]
# Explanation:
# To the right of 5 there are 2 smaller elements (2 and 1).
# To the right of 2 there is only 1 smaller element (1).
# To the right of 6 there is 1 smaller element (1).
# To the right of 1 there is 0 smaller element.

class Solution:
    def countSmaller(self, nums: List[int]) -> List[int]:
        s_nums = sorted(nums)
        sol = []
        
        def bs(n):
            l,r = 0, len(s_nums)
            while l<=r:
                mid = (l+r)//2
                if s_nums[mid] == n:
                    while mid >= 0 and s_nums[mid] == n:
                        mid = mid-1
                    return mid+1
                elif s_nums[mid]>n:
                    r = mid-1
                else:
                    l = mid+1   
            return left
            
        for i in nums:
            idx = bs(i)
            sol.append(idx)
            s_nums.pop(idx)
        return sol
            
