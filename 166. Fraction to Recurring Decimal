# 166. Fraction to Recurring Decimal
class Solution:
    def fractionToDecimal(self, numerator: int, denominator: int) -> str:

        nsign = False
        if numerator*denominator < 0:
            nsign = True
        numerator, denominator = abs(numerator), abs(denominator)        
        new = numerator % denominator
        prev = numerator//denominator
        
        if new == 0:
            return ("-" if nsign else "") + str(prev)        

        frac, dic_appeared = "", {}
        pos = 0
        while new not in dic_appeared:
            if new == 0:
                return ("-" if nsign else "") + str(prev) + "." + frac
            else:
                dic_appeared[new] = pos
                pos += 1 
                frac += str(new*10//denominator)
                new = (new*10)% denominator
        return ("-" if nsign else "") + str(prev) + "." + frac[:dic_appeared[new]] + "(" +  frac[dic_appeared[new]:] + ")"           
