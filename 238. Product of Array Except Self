# 238. Product of Array Except Self

# Given an array nums of n integers where n > 1,  return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

# Example:

# Input:  [1,2,3,4]
# Output: [24,12,8,6]
# Constraint: It's guaranteed that the product of the elements of any prefix or suffix of the array (including the whole array) fits in a 32 bit integer.

# Note: Please solve it without division and in O(n).

# Follow up:
# Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysi

class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        #Method1. Using Division
#         total = 1
#         count_zero = 0
#         output = []
        
#         for x in nums:
#             if x != 0:
#                 total *= x
#             else:
#                 count_zero +=1
                      
#         if count_zero>1 :
#             return [0]*len(nums)         
        
#         if count_zero ==0:
#             for x in nums:
#                 output.append(int(total/x))
#             return output
        
#         for x in nums:
#             if x == 0:
#                 output.append(total)
#             else:
#                 output.append(0)       
#         return output
        #Method2. Using Prefix and suffix sum
        n = len(nums)
        prefix = [None]*n
        suffix = [None]*n
        prefix[0] = nums[0]
        suffix[n-1] = nums[n-1]        
        for i in range(1,n):   
            prefix[i] = prefix[i-1]*nums[i]
            suffix[n-1-i] = suffix[n-i]*nums[n-1-i]
        output = [None]*n
        output[0] = suffix[1]
        output[n-1] = prefix[n-2] 
        for i in range(1,n-1):            
            output[i]= prefix[i-1]*suffix[i+1]
        return output
            
