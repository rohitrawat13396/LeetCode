#15. 3Sum
# Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

# Note:

# The solution set must not contain duplicate triplets.

# Example:

# Given array nums = [-1, 0, 1, 2, -1, -4],

# A solution set is:
# [
#   [-1, 0, 1],
#   [-1, -1, 2]
# ]

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        #sol = []
#         fsol = []
#         nums.sort()
#         for i in range(len(nums)-2):
#             if (i==0) or (nums[i]!=nums[i-1]):
#                 l = i+1
#                 r = len(nums)-1
#                 while(l<r):
#                     sum_t = nums[i]+nums[l]+nums[r]
#                     if sum_t==0:
#                         fsol.append([nums[i],nums[l],nums[r]])
#                         while(l<r and nums[l]==nums[l+1]):
#                             l+=1
#                         while (l<r and nums[r]==nums[r-1]):
#                             r-=1
#                         l+=1
#                         r-=1
                        
#                     elif sum_t<0:
#                         l+=1
#                     else:
#                         r-=1
#         return fsol
        fsol = []
        nums.sort()
        n = len(nums)
        for i in range(n-2):
            if (i==0) or nums[i]!=nums[i-1]:
                l = i+1
                r= n-1
                while(l<r):
                    tsum = nums[i]+nums[l]+nums[r]
                    if tsum ==0:
                        fsol.append([nums[i],nums[l],nums[r]])
                        while (l<r and nums[l] == nums[l+1]):
                            l +=1
                        while (l<r and nums[r] == nums[r-1]):
                            r -=1
                        l+=1
                        r-=1
                    elif tsum <0:
                        l +=1
                    else:
                        r -=1
        return fsol
            
