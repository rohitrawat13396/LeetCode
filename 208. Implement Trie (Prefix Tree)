# 208. Implement Trie (Prefix Tree)

# Trie trie = new Trie();

# trie.insert("apple");
# trie.search("apple");   // returns true
# trie.search("app");     // returns false
# trie.startsWith("app"); // returns true
# trie.insert("app");   
# trie.search("app");     // returns true

# class Trie:

#     def __init__(self):
#         """
#         Initialize your data structure here.
#         """
#         self.trie = set()
        

#     def insert(self, word: str) -> None:
#         """
#         Inserts a word into the trie.
#         """
#         self.trie.add(word)
        

#     def search(self, word: str) -> bool:
#         """
#         Returns if the word is in the trie.
#         """
#         if word in self.trie:
#             return True
        

#     def startsWith(self, prefix: str) -> bool:
#         """
#         Returns if there is any word in the trie that starts with the given prefix.
#         """
#         if self.search(prefix):
#             return True
        
#         for word in self.trie:
#             if len(word)<len(prefix):
#                 continue
#             if word[:len(prefix)] == prefix:
#                 return True
#         return False
class Trie:
    
    def __init__(self):
        self.root = {}

    def insert(self, word: str) -> None:
        cur_node = self.root
        for letter in word:
            if letter not in cur_node:
                cur_node[letter] = {}
            cur_node = cur_node[letter]
        cur_node['$'] = True                
        

    def search(self, word: str) -> bool:
        cur_node = self.root
        for letter in word:
            if letter not in cur_node:
                return False
            cur_node = cur_node[letter]
        return '$' in cur_node
        

    def startsWith(self, prefix: str) -> bool:
        cur_node = self.root
        for letter in prefix:
            if letter not in cur_node:
                return False
            cur_node = cur_node[letter]
        return True


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
