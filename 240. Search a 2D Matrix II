# 240. Search a 2D Matrix II
# Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

# Integers in each row are sorted in ascending from left to right.
# Integers in each column are sorted in ascending from top to bottom.
# Example:

# Consider the following matrix:

# [
#   [1,   4,  7, 11, 15],
#   [2,   5,  8, 12, 19],
#   [3,   6,  9, 16, 22],
#   [10, 13, 14, 17, 24],
#   [18, 21, 23, 26, 30]
# ]
# Given target = 5, return true.

# Given target = 20, return false.

class Solution:
    def searchMatrix(self, matrix, target):
       
        if not matrix or not matrix[0]:
            return False
        m = len(matrix)
        n = len(matrix[0]) 
        i, j = m-1  , 0
        if matrix[0][0] > target or matrix[m-1][n-1] < target:
            return False
        
        while i >=0 and j>=0 and i < m and j < n:            
            if target < matrix[i][j]:
                i -= 1
            elif target > matrix[i][j]:
                j +=1
            else:
                return True
        return False
            
                
        
