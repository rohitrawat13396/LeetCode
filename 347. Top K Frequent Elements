# 347. Top K Frequent Elements
# Given a non-empty array of integers, return the k most frequent elements.

# Example 1:

# Input: nums = [1,1,1,2,2,3], k = 2
# Output: [1,2]
# Example 2:

# Input: nums = [1], k = 1
# Output: [1]

# #MEthod 0: Using sorting O(nlogk)
# class Solution:
#     def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        
#         if not nums:
#             return []
#         if k == len(nums):
#             return nums
#         nums = Counter(nums)   
#         sorted_item = sorted(nums.items(), key= lambda x: x[1], reverse = True)
#         return [x[0] for x in sorted_item[:k]]
    
#Method1: Using sorting O(nlogk)    
class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:        
        if not nums:
            return []
        if k == len(nums):
            return nums
        nums = Counter(nums)   
        return heapq.nlargest(k, nums.keys(), key= lambda x: nums[x]) 
                    
            
        
