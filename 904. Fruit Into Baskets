# 904. Fruit Into Baskets
# In a row of trees, the i-th tree produces fruit with type tree[i].

# You start at any tree of your choice, then repeatedly perform the following steps:

# Add one piece of fruit from this tree to your baskets.  If you cannot, stop.
# Move to the next tree to the right of the current tree.  If there is no tree to the right, stop.
# Note that you do not have any choice after the initial choice of starting tree: you must perform step 1, then step 2, then back to step 1, then step 2, and so on until you stop.

# You have two baskets, and each basket can carry any quantity of fruit, but you want each basket to only carry one type of fruit each.

# What is the total amount of fruit you can collect with this procedure?

class Solution:
    def totalFruit(self, tree: List[int]) -> int:
        max_len = 0
        pair = []
        count = 0
        for i in range(len(tree)):
            # print(pair, tree[i],count)
            if tree[i] not in pair and len(pair)<2:
                # print("first")
                pair.append(tree[i])
                count +=1
                
            elif tree[i] in pair and len(pair)<3:
                # print("sec")
                count +=1
            else:
                # print("thrid")
                max_len = max(max_len,count)
                pair = []
                pair.append(tree[i-1])
                pair.append(tree[i])
                count = 2
                j=i-2
                while j>-1 and tree[j] == pair[0]:
                    count +=1
                    j -=1       
        
        return max(max_len,count)
                
            
