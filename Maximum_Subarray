Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.


#Greedy Algorithm
# class Solution:
#     def maxSubArray(self, nums: List[int]) -> int:
#         max_sum = curr_sum = nums[0]
#         sol = []
#         for i in range(1,len(nums)):
#             curr_sum = max(curr_sum+nums[i], nums[i])
#             max_sum = max(max_sum, curr_sum)
#         return max_sum
#DP algorithm
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        max_sum = nums[0]
        for i in range(1,len(nums)):
            if nums[i-1]>0:
                nums[i] +=nums[i-1]
            max_sum = max(nums[i], max_sum)
        print(nums)    
        return max_sum
                
