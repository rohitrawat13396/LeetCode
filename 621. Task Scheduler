# 621. Task Scheduler
# Example 1:

# Input: tasks = ["A","A","A","B","B","B"], n = 2
# Output: 8
# Explanation: 
# A -> B -> idle -> A -> B -> idle -> A -> B
# There is at least 2 units of time between any two same tasks.
# Example 2:

# Input: tasks = ["A","A","A","B","B","B"], n = 0
# Output: 6
# Explanation: On this case any permutation of size 6 would work since n = 0.
# ["A","A","A","B","B","B"]
# ["A","B","A","B","A","B"]
# ["B","B","B","A","A","A"]
# ...
# And so on.
# Example 3:

# Input: tasks = ["A","A","A","A","A","A","B","C","D","E","F","G"], n = 2
# Output: 16
# Explanation: 
# One possible solution is
# A -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A

class Solution:
    def leastInterval(self, tasks: List[str], n: int) -> int:
        #MEthod0. sorting and iteration
#         dic_tasks = Counter(tasks)
        
#         dic_tasks = dict(sorted(dic_tasks.items(), key = lambda x: x[1], reverse= True))
#         print(dic_tasks)
#         cool_down = n+1
#         units = 0
#         leng = len(tasks)
#         while leng:
#             cool_down = n+1
#             for k in dic_tasks.keys():
#                 if dic_tasks[k] != 0:
#                     if cool_down != 0:                    
#                         dic_tasks[k] -= 1
#                         leng -= 1
#                         units +=1
#                         cool_down -=1
#                     else:
#                         break
#             dic_tasks = dict(sorted(dic_tasks.items(), key = lambda x: x[1], reverse= True))

#             if leng>0:           
#                 units += cool_down
            
#         return units
    #Method1. Greedy and sorting
        # freq = sorted(Counter(tasks).values())
        # fmax = freq.pop()
        # idle_time = (fmax-1)*n
        # while freq and idle_time>0:
        #     idle_time -= min(fmax-1,freq.pop())
        # idle_time = max(0, idle_time)
        # return idle_time + len(tasks)
        
    #MEthod2. Maths
        freq = Counter(tasks).values()
        fmax = max(freq)
        n_max= 0
        for val in freq:
            if val == fmax:
                n_max += 1
        return max(len(tasks), (n+1)*(fmax-1) + n_max)
        
        

        
