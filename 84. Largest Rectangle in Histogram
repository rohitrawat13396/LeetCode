# 84. Largest Rectangle in Histogram
# Example:

# Input: [2,1,5,6,2,3]
# Output: 10
    
class Solution:
    def largestRectangleArea(self, heights: List[int]) -> int:
        #Method1. Didn't work
#         if not heights:
#             return 0
#         l= 0
#         r= len(heights)-1
#         max_area = float("-inf")
#         while(l< len(heights) and r>=0):
#             if l<=r:
#                 print("overall",l,r,min(heights[l:r+1]),"maxarea",max_area)
#                 max_area = max((r-l+1)*min(min(heights[l:r+1]),heights[l],heights[r]),max_area)
#             else:
#                 print("overall",l,r,min(heights[r:l+1]),"maxarea",max_area)
#                 max_area = max((l-r+1)*min(min(heights[r:l+1]),heights[l],heights[r]),max_area)

#             if heights[l] <= heights[r]:
#                 l+=1
#             else:
#                 r -=1
#         return max_area

    #Method2. Brute Force O(n^2) but TLE
        # if not heights:
        #     return 0
        # max_area = float("-inf")
        # for i in range(len(heights)):
        #     min_height = float("inf")
        #     for j in range(i,len(heights)):
        #         min_height = min(min_height,heights[j])
        #         max_area = max(max_area,min_height*(j-i+1))
        # return max_area
        
    #Method3. Divide and Conquer O(nlogn) but TLE for 20,000 sorted records as worst case is O(n^2)
    #     return self.calculate_area(heights,0,len(heights)-1)
    # def calculate_area(self,heights, start, end):
    #     if start>end:
    #         return 0
    #     min_ind = start
    #     for i in range(start, end+1):
    #         if heights[min_ind]>heights[i]:
    #             min_ind = i
    #     return max((end-start+1)*heights[min_ind],self.calculate_area(heights, start, min_ind-1),
    #                self.calculate_area(heights, min_ind+1, end))
    
    #Method4. Stack with O(n). Hope it works..And Worked!:D
        stack = []
        stack.append(-1)
        top = -1
        max_area = float("-inf")
        if not heights:
            return 0
        for i in range(len(heights)):
            if stack[top]==-1 or heights[stack[top]]<=heights[i]:
                stack.append(i)
            else:
                while heights[stack[top]]> heights[i] and  stack[top]!=-1:
                    max_area = max(max_area, heights[stack.pop()]*(i-stack[top]-1))
                stack.append(i)

        while stack[top]!=-1:  
            max_area = max(max_area, heights[stack.pop()]*(len(heights)-stack[top]-1))
                   
        return max_area
