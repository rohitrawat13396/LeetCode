# 140. Word Break II
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:
        
        def backtracking(bs: str, cs):
            if not bs:
                result.append(cs[:-1])
            
            for i in range(1,len(bs)+1):
                if bs[:i] in wordDict: 
                    backtracking(bs[i:], cs + bs[:i] + " ")
    
        wordDict = set(wordDict)
        result = []
        backtracking(s, "")
        return result
        
 # 140. Word Break II
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:
        
        def backtracking(bs: str):
            if bs in memo:
                return memo[bs]
            if bs == "":
                return None
                # result.append(cs[:-1])
            sol= []
            for i in range(len(bs)+1):
                if bs[:i] in wordDict: 
                    res = backtracking(bs[i:])
                    if res == None:
                        sol.append(bs[:i])
                    else:
                        for string in res:
                            print(string)
                            sol.append(bs[:i] + " " + string)
            memo[bs] = sol
            return sol
    
        wordDict = set(wordDict)
        result = []
        memo = {}
        return backtracking(s)

# 140. Word Break II
#Faster with indices
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:
        
        def backtracking(bs):
            if s[bs:] in memo:
                return memo[s[bs:]]
            if s[bs:] == "":
                return None
            sol= []
            for i in range(bs,len(s)+1):
                if s[bs:i] in wordDict: 
                    res = backtracking(i)
                    if res == None:
                        sol.append(s[bs:i])
                    else:
                        for string in res:
                            sol.append(s[bs:i] + " " + string)
            memo[s[bs:]] = sol
            return sol
    
        wordDict = set(wordDict)
        result = []
        memo = {}
        return backtracking(0)


