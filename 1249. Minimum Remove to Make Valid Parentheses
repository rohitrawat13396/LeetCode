# 1249. Minimum Remove to Make Valid Parentheses

# Given a string s of '(' , ')' and lowercase English characters. 

# Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.

# Formally, a parentheses string is valid if and only if:

# It is the empty string, contains only lowercase characters, or
# It can be written as AB (A concatenated with B), where A and B are valid strings, or
# It can be written as (A), where A is a valid string.

class Solution:
    def minRemoveToMakeValid(self, s: str) -> str:
        
        stack = []
        extra_bracket = []
        for i in range(len(s)):
            if s[i] == '(':
                stack.append((s[i],i))
            elif s[i] == ')':
                if stack and stack[-1]!=')':
                    stack.pop()
                else:
                    extra_bracket.append((s[i],i))
        stack = extra_bracket + stack
        s = list(s)
        while stack:
            l = stack.pop()
            del s[l[1]]
        return "".join(s)
        
