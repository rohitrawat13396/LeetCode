# 937. Reorder Data in Log Files


# You have an array of logs.  Each log is a space delimited string of words.

# For each log, the first word in each log is an alphanumeric identifier.  Then, either:

# Each word after the identifier will consist only of lowercase letters, or;
# Each word after the identifier will consist only of digits.
# We will call these two varieties of logs letter-logs and digit-logs.  It is guaranteed that each log has at least one word after its identifier.

# Reorder the logs so that all of the letter-logs come before any digit-log.  The letter-logs are ordered lexicographically ignoring identifier, with the identifier used in case of ties.  The digit-logs should be put in their original order.

# Return the final order of the logs.

class Solution:
    def reorderLogFiles(self, logs: List[str]) -> List[str]:
        
#         if not logs:
#             return
        
#         list_numeric = []
#         alpha_list = []
#         for log in logs:
#             log_new = log
#             log = log.split()
#             if log[1][0].isnumeric():
#                 list_numeric.append(log_new)
#             else:
#                 alpha_list.append(log)
        
#         def sorter(elem):
#             return (elem[1:],elem[0])        
#         alpha_list = sorted(alpha_list, key = sorter)        
#         res= []
#         for log in alpha_list:
#             res.append(" ".join(log))            
#         return res + list_numeric
    
    #MEthod 2. More efficient
        def f(log):
            id_, rest = log.split(" ", 1)
            return (0, rest, id_) if rest[0].isalpha() else (1,)

        return sorted(logs, key = f)
    

