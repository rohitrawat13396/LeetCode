#Basic function in O(n) as min() is used over list
class MinStack:

    def __init__(self):
        """
        initialize your data structure here.
        
        """
        self.stack = []

    def push(self, x: int) -> None:
        self.stack.append(x)

    def pop(self) -> None:
        self.stack = self.stack[:len(self.stack)-1]
        

    def top(self) -> int:
        return self.stack[len(self.stack)-1]

    def getMin(self) -> int:
        return min(self.stack)

#function in O(1)

class MinStack:

    def __init__(self):
        """
        initialize your data structure here.
        
        """
        self.stack = []

    def push(self, x: int) -> None:
        if not self.stack:
            self.stack.append((x,x))
            return

        curr_min = self.stack[-1][1]
        self.stack.append((x, min(x,curr_min)))

    def pop(self) -> None:
        self.stack.pop()
        # print(self.stack)
        

    def top(self) -> int:
        return self.stack[-1][0]
    
        
    def getMin(self) -> int:
        return self.stack[-1][1]


# Your MinStack object will be instantiated and called as such:
# obj = MinStack()
# obj.push(x)
# obj.pop()
# param_3 = obj.top()
# param_4 = obj.getMin()
# param_4 = obj.getMin()
