# 79. Word Search
# Given a 2D board and a word, find if the word exists in the grid.

# The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

# Example:

# board =
# [
#   ['A','B','C','E'],
#   ['S','F','C','S'],
#   ['A','D','E','E']
# ]

# Given word = "ABCCED", return true.
# Given word = "SEE", return true.
# Given word = "ABCB", return false.

class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
    #Dict method failed
    #Method1. Backtracking

        for row in range(len(board)):
            for col in range(len(board[0])):
                # print(board)
                if self.backtracking(row,col,word,board):
                    return True
        return False
    
    def backtracking(self,row,col,suffix,board):
        if len(suffix)==0:
            return True
        if row<0 or row == len(board) or col<0 or col == len(board[0]) or board[row][col]!=suffix[0]:
            return False
        board[row][col] = '#'
        # print("before",board)
        for rowoffset,coloffset in [(0,1),(1,0),(0,-1),(-1,0)]:
            if self.backtracking(row+rowoffset,col+coloffset,suffix[1:],board):
                # print(row+rowoffset,col+coloffset,suffix[1:])
                return True
        board[row][col] = suffix[0]
        # print(board)
        
        return False
