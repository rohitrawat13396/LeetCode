# 218. The Skyline Problem
# class Solution:
#     def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:
        
#         points = []
#         for l,r,h in buildings:
#             points.append([l,h, "s"])
#             points.append([r,-h,"e"])
            
#         points.sort(key = lambda x: (x[0], -x[1]))
#         res,maxheap = [], [0]
#         tombstones = {}
        
#         def heap_remove(heap, value):
#             tombstones[value] = tombstones.get(value, 0) + 1
#             while len(heap) and heap[0] in tombstones and tombstones[heap[0]]:
#                 tombstones[heap[0]] -= 1
#                 heapq.heappop(heap)
        
#         for p in points:
#             if p[2] == 's':
#                 if p[1] > -maxheap[0]:
#                     res.append([p[0],p[1]])
#                 heapq.heappush(maxheap,-p[1])
#             elif p[2]== 'e':
#                 # maxheap.remove(p[1])
#                 heap_remove(maxheap, p[1])
#                 heapq.heapify(maxheap)
#                 if -p[1]> -maxheap[0]:
#                     res.append([p[0],-maxheap[0]])
#         return res

class Solution:
    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:
        events = [(left, -height, right) for left, right, height in buildings] + list({(right, 0, 0) for _, right, _ in buildings})
        events.sort()
        live = [(0, float('inf'))]
        result = []
        for pos, height, right in events:
            while live[0][1] <= pos:
                heapq.heappop(live)
            if height < 0:
                heapq.heappush(live, (height, right))
            if not result or result[-1][1] != -live[0][0]:
                result.append([pos, -live[0][0]])
        return result
                
                
                
#         # [2,10],[3,15],[5,12],[7,15], [9,10],[12,12], [15,10], [19,8], [20,10],[24,8]
