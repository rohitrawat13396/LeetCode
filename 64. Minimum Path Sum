# 64. Minimum Path Sum
# Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

# Note: You can only move either down or right at any point in time.

# Example:

# Input:
# [
#   [1,3,1],
#   [1,5,1],
#   [4,2,1]
# ]
# Output: 7
# Explanation: Because the path 1→3→1→1→1 minimizes the sum.

# import numpy as np
class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
#         Method1: Time limit exceeded for Recursion
#         if not grid:
#             return 0
#         m,n = len(grid),len(grid[0])
#         if m<=1 or n<=1:
#             return sum(sum(grid,[]))
#         grid = np.array(grid)
#         return min(grid[m-1][n-1] + self.minimumNode(m-2,n-1,grid), grid[m-1][n-1] + self.minimumNode(m-1,n-2, grid))
        
#     def minimumNode(self, m, n,grid):
#         if m==0 or n==0:
#             if m==0:
#                 return  sum(grid[0,:n+1])
#             elif n ==0:
#                 return sum(grid[:m+1,0]) 
            
#         return min(grid[m][n] + self.minimumNode(m-1,n,grid),grid[m][n] + self.minimumNode(m,n-1,grid))
# 
# Method2: DP with 2D array

        # if not grid:
        #     return 0
        # m,n = len(grid), len(grid[0])
        # dp = [[0]*n for _ in range(m)]
        # dp[0][0] = grid[m-1][n-1]
        # for row in range(m-1,-1,-1):
        #     for col in range(n-1,-1,-1):
        #         if row == m-1 and col == n-1:
        #             dp[row][col] = grid[row][col]
        #             continue
        #         if row == m-1:
        #             dp[row][col] = grid[row][col] + dp[row][col+1]
        #             continue
        #         if col == n-1:
        #             dp[row][col] = grid[row][col] + dp[row+1][col]
        #             continue
        #         dp[row][col] = grid[row][col] + min(dp[row+1][col],dp[row][col+1])
        # # print(dp)
        # return dp[0][0]
    
# Method 3: DP without extra space
        if not grid:
            return 0
        m = len(grid)
        n = len(grid[0])
        
        for i in range(1,m):
            grid[i][0] += grid[i-1][0]
        for j in range(1,n):
            grid[0][j] += grid[0][j-1]
        for i in range(1,m):
            for j in range(1,n):
                grid[i][j] = grid[i][j] + min(grid[i-1][j], grid[i][j-1])
        # print(grid)
        return grid[-1][-1]
    
    
            
