# 72. Edit Distance
# Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.

# You have the following 3 operations permitted on a word:

# Insert a character
# Delete a character
# Replace a character
# Example 1:

# Input: word1 = "horse", word2 = "ros"
# Output: 3
# Explanation: 
# horse -> rorse (replace 'h' with 'r')
# rorse -> rose (remove 'r')
# rose -> ros (remove 'e')

class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        n = len(word1)
        m = len(word2)
        if n*m == 0:
            return n+m
        d = [[0]*(m+1) for _ in range(n+1)]
        
        for i in range(n+1):
            d[i][0] = i
        for j in range(m+1):
            d[0][j] = j
            
        # for i in range(1,n+1):
        #     for j in range(1,m+1):
        #         left = d[i-1][j]+1
        #         up = d[i][j-1]+1
        #         left_up = d[i-1][j-1]
        #         if word1[i-1]!= word2[j-1]:
        #             left_up +=1
        #         d[i][j] = min(left, up, left_up)
        # print(d)
        # return d[n][m]
        for i in range(1,n+1):
            for j in range(1,m+1):
                left = d[i][j-1]
                up = d[i-1][j]
                left_up = d[i-1][j-1]
                if word1[i-1]!= word2[j-1]:     #loop started from 1 but string starts from 0
                    d[i][j]= 1 + min(left, up, left_up)
                else:
                    d[i][j] = left_up   #sol will be same as for up to last element

        return d[-1][-1]
    
