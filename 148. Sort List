# 148. Sort List

# Sort a linked list in O(n log n) time using constant space complexity.

# Example 1:

# Input: 4->2->1->3
# Output: 1->2->3->4
# Example 2:

# Input: -1->5->3->4->0
# Output: -1->0->3->4->5
    
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def sortList(self, head: ListNode) -> ListNode:
        #Method0.Bruteforce using sort() with O(nlogn) but not constant space
        # sol = []
        # if not head:
        #     return
        # while head:
        #     sol.append(head.val)
        #     head = head.next
        # sol.sort()
        # ans1 = ans2 = ListNode(sol[0])
        # for i in range(1,len(sol)):
        #     node = ListNode(sol[i])
        #     ans1.next = node
        #     ans1 = ans1.next
        # return ans2
        #Method1. O(nlogn) with constant space (99.91% fast)
        h1 = head
        h2 = head
        s= []
        if not head:
            return 
        while h1:
            s.append(h1.val)
            h1 = h1.next
        s.sort()
        for i in range(len(s)):
            h2.val = s[i]
            h2 = h2.next
        return head
            
