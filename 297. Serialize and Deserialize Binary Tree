# 297. Serialize and Deserialize Binary Tree

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        # string = ""
        def helper(root,string):
            if not root:
                string += "None,"
                return string
            string += str(root.val) + ","
            string= helper(root.left,string)            
            string= helper(root.right,string)
            return string
        string =  helper(root, "")
        return string
        

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        def helper2(data):
            if data[0] == 'None':
                data.pop(0)
                return None
            root = TreeNode(data[0])
            data.pop(0)
            root.left = helper2(data)
            root.right = helper2(data)
            return root
        data = data.split(',')
        root = helper2(data)
        return root
        

# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.deserialize(codec.serialize(root))
