# 416. Partition Equal Subset Sum
# Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

# Note:

# Each of the array element will not exceed 100.
# The array size will not exceed 200.

class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        
        #Method0. DP Bottom up in O(subsetsum*n) and O(subsetsum*n)
        total_sum = sum(nums)
        
        if total_sum %2 !=0:
            return False
        subsetsum = total_sum//2
#         dp = [[False]*(subsetsum+1) for _ in range(len(nums)+1)]
#         dp[0][0] = True
        
#         for i in range(1,len(nums)+1):
#             curr = nums[i-1]
#             for j in range(subsetsum+1):
#                 if j < curr:
#                     dp[i][j] = dp[i-1][j]
#                 else:
#                     dp[i][j] = dp[i-1][j] or (dp[i-1][j-curr])
#         return dp[len(nums)][subsetsum]
        
        #Method1. Same with Space O(subsetsum)
        dp = [False]*(subsetsum +1)
        dp[0] = True
        for n in nums:
            for j in range(subsetsum,n-1,-1):
                dp[j]= dp[j] or dp[j-n]
        return dp[subsetsum]
    
            
            
        
        
