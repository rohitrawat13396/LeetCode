# 437. Path Sum III
# Example:

# root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8

#       10
#      /  \
#     5   -3
#    / \    \
#   3   2   11
#  / \   \
# 3  -2   1

# Return 3. The paths that sum to 8 are:

# 1.  5 -> 3
# 2.  5 -> 2 -> 1
# 3. -3 -> 11
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pathSum(self, root: TreeNode, sum: int) -> int:
        
        def preorder(root, curr_sum):
            nonlocal count
            if not root:
                return 0
            curr_sum += root.val
            
            if curr_sum == sum:
                count += 1            
            count += h[curr_sum-sum]
            h[curr_sum] +=1
            preorder(root.left,curr_sum)
            preorder(root.right,curr_sum)
            h[curr_sum] -=1
            
        count = 0
        h = defaultdict(int)
        preorder(root,0)
        return count
            
            
        
