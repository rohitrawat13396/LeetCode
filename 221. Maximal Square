# 221. Maximal Square
# Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

# Example:

# Input: 

# 1 0 1 0 0
# 1 0 1 1 1
# 1 1 1 1 1
# 1 0 0 1 0

# Output: 4
    
class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        # Method0. DP with O(mn), both time and space
        # if not matrix:
        #     return 0
        # dp = [[0]*(len(matrix[0])+1) for _ in range(len(matrix)+1)]
        # res = 0
        # for i in range(1,len(matrix)+1):
        #     for j in range(1,len(matrix[0])+1):
        #         if matrix[i-1][j-1] == "1":
        #             dp[i][j] = min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1])+1
        #             res = max(res,dp[i][j])
        # return res*res
        
        #Method1. DP with O(n) space
        if not matrix:
            return 0
        dp = [0]*(len(matrix[0])+1)
        res_len = 0
        prev = 0
        for i in range(1, len(matrix)+1):
            for j in range(1,len(matrix[0])+1):
                temp = dp[j]
                if matrix[i-1][j-1] == '1':
                    dp[j] = min(dp[j-1],dp[j], prev) +1
                    res_len = max(res_len,dp[j])
                else:
                    dp[j] = 0
                prev = temp
        return res_len*res_len
                
            
            
