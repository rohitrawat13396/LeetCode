# Greedy Algo with O(n)

class Solution:
    def canJump(self, nums: List[int]) -> bool:
        #Maximum position one can jump from index 0
        max_pos = nums[0]
        
        for i in range(1,len(nums)):
            #if up to max_pos[i-1] is lesser than i then for any unreachable index i <= n-1, it is impossible to reach the last step.
            if max_pos < i:
                return False
            max_pos = max(max_pos,nums[i]+i)
            
        return True
        
 #Backtracking : Time limit Exceeded
# class Solution:    
#     def possiblejump(self, pos, nums):
#         # print("pos",pos)
#         n = len(nums)
#         if pos == n-1:
#             # print(pos)
#             return True
#         furthestjump = min(pos + nums[pos],n-1)
#         for np in range(pos+1,furthestjump+1):
#             if self.possiblejump(np, nums):
#                 return True        
        
#     def canJump(self, nums: List[int]) -> bool:
#         return self.possiblejump(0, nums)
