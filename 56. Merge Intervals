# 56. Merge Intervals
# Given a collection of intervals, merge all overlapping intervals.
# Input: [[1,3],[2,6],[8,10],[15,18]]
# Output: [[1,6],[8,10],[15,18]]
# Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].

#Time Complexity: O(nlogn) because of sorted method
class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        intervals = sorted(intervals)
        print(intervals)
        if (not intervals) or (len(intervals) ==1):
            return intervals
        res = []
        last_closing_value = intervals[0][1]
        first_closing_value = intervals[0][0]
        # print("intially",first_closing_value,last_closing_value)
        for i in range(1,len(intervals)):
            if last_closing_value > intervals[i][1]:
                continue
            if last_closing_value < intervals[i][0]:
                res.append([first_closing_value,last_closing_value])
                first_closing_value = intervals[i][0]
                last_closing_value  = intervals[i][1]
            else:
                last_closing_value = intervals[i][1]
            # print("with i=",i,first_closing_value,last_closing_value)
                  
        res.append([first_closing_value,last_closing_value])
        # print(res)
        return res
                
