# 31. Next Permutation

# Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

# If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).

# The replacement must be in-place and use only constant extra memory.

# Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.

# 1,2,3 â†’ 1,3,2
# 3,2,1 â†’ 1,2,3
# 1,1,5 â†’ 1,5,1

class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        print(nums)
        i = len(nums)-2
        while(i>=0 and nums[i+1]<=nums[i]):
            i-=1
        if i>=0:
            j = len(nums)-1
            while(j >=0 and nums[j]<=nums[i]):
                j-=1
            print(nums[j],nums[i])
            nums[i],nums[j] = nums[j],nums[i]
            
            print(nums[j],nums[i])
        print(nums[::-1])
        nums[i+1:] = nums[i+1:][::-1]
                    
            
        
            


            
        
        
