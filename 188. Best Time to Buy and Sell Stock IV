# 188. Best Time to Buy and Sell Stock IV

# You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

# Find the maximum profit you can achieve. You may complete at most k transactions.

# Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).
    
class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        n = len(prices)
        
        if not prices or k ==0:
            return 0
        if 2*k>n:
            p = 0
            for i,j in zip(prices[1:],prices[:-1]):
                p += max(0,i-j)
            return p
        
        dp = [[[float("-inf")]*2 for _ in range(k+1)] for _ in range(n)] 
        dp[0][0][0] = 0
        dp[0][1][1] = -prices[0]
        
        for i in range(1,n):
            for j in range(k+1):
                dp[i][j][0] = max(dp[i-1][j][0], dp[i-1][j][1] + prices[i])
                if j>0:
                    dp[i][j][1] = max(dp[i-1][j][1], dp[i-1][j-1][0] - prices[i])
        
        res = max(dp[n-1][j][0] for j in range(k+1))
        
        return res
                
