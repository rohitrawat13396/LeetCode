# 22. Generate Parentheses
# Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

# For example, given n = 3, a solution set is:

# [
#   "((()))",
#   "(()())",
#   "(())()",
#   "()(())",
#   "()()()"
# ]


class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        list_p = []
        def backtrack(S = '', left = 0,right=0):
            if len(S) == 2*n:
                list_p.append(S)
            if left < n:
                backtrack(S + '(',left+1,right)
            if left>right:
                backtrack(S + ')',left,right+1)
        backtrack()
        return list_p
        
