#21. Merge Two Sorted Lists

# Merge two sorted linked lists and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists.

# Example:

# Input: 1->2->4, 1->3->4
# Output: 1->1->2->3->4->4

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        '''list1 = []
        l3 = ListNode(0)
        #print(l3)
        while(l1!=None or  l2 != None):
                    
            if l1 is not None:
                list1.append(l1.val)
                l1 = l1.next
            if l2 is not None:
                list1.append(l2.val)
                l2 = l2.next
        list1.sort()
        l4 = l3
        for m in list1:
            ll = ListNode(0)
            ll.val= m
            l3.next = ll
            l3 = l3.next

        return l4.next'''
        def rec_merge(l1: ListNode,l2: ListNode):
            
            if l1 is None:
                return l2
            if l2 is None:
                return l1
            if l1.val<=l2.val:
                l1.next = rec_merge(l1.next,l2)
                return l1
            else:
                l2.next = rec_merge(l1,l2.next)
                return l2
        
        l3 = rec_merge(l1,l2)
        return l3
            
