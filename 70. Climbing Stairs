# 70. Climbing Stairs
# You are climbing a stair case. It takes n steps to reach to the top.

# Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
# Example 1:

# Input: 2
# Output: 2
# Explanation: There are two ways to climb to the top.
# 1. 1 step + 1 step
# 2. 2 steps

class Solution:
    #Method 1. Recursion but time limit exceeded
    # def climbStairs(self, n: int, i = 0) -> int:
        # print(i,n)
        # if i > n:
        #     return 0
        # if i == n:
        #     return 1
        # return self.climbStairs(n, i+1) + self.climbStairs(n, i+2)
    #Method2: Memoization with recursion
#     def climbStairs(self, n: int) -> int:
#         memo = [0]*n
#         return self.climb(n, memo,0)
    
#     def climb(self, n: int, memo, i):
#         # print(memo,i)
#         if i > n:
#             return 0
#         if i == n:
#             return 1
#         if memo[i] > 0:
#             return memo[i]
#         memo[i] = self.climb(n, memo, i+1) + self.climb(n, memo, i+2)
#         return memo[i]
    #Method 3: DP    
    def climbStairs(self, n: int) -> int:
        if n <=1:
            return n
        dp = [0]*n
        dp[0], dp[1] = 1, 2
        
        for i in range(2,n):
            dp[i] = dp[i-1] + dp[i-2]
            
        return dp[n-1]
        
