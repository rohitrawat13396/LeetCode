# 78. Subsets

# Given a set of distinct integers, nums, return all possible subsets (the power set).

# Note: The solution set must not contain duplicate subsets.

# Example:

# Input: nums = [1,2,3]
# Output:
# [
#   [3],
#   [1],
#   [2],
#   [1,2,3],
#   [1,3],
#   [2,3],
#   [1,2],
#   []
# ]
class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        
        #Method1. Cascading
#         n = len(nums)
#         sol = [[]]

#         for num in nums:
#             sol += [curr + [num] for curr in sol]
#         return sol
    
        #method2. Bitmask
        n = len(nums)
        sol = []
        
        for i in range(2**n, 2**(n+1)):
            bitmask = bin(i)[3:]
            print(bitmask)
            sol.append([nums[j] for j in range(n) if bitmask[j]=='1'])
        return sol
