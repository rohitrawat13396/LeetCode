# 85. Maximal Rectangle

# Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

# Example:

# Input:
# [
#   ["1","0","1","0","0"],
#   ["1","0","1","1","1"],
#   ["1","1","1","1","1"],
#   ["1","0","0","1","0"]
# ]
# Output: 6

class Solution:
    def maximalRectangle(self, matrix: List[List[str]]) -> int:
#Method1. Dynamic Programming - Better Brute Force on Histograms: TLE O(N^2M)
#         max_area = 0
        
#         dp = [[0]*len(matrix[0]) for _ in range(len(matrix))]
        
#         for i in range(len(matrix)):
#             for j in range(len(matrix[0])):
#                 if matrix[i][j] == '0': continue
                       
#                 if j:
#                        width = dp[i][j] = dp[i][j-1] + 1
#                 else:
#                        width = dp[i][j] =1
                
#                 for k in range(i,-1,-1):
#                     width = min(width,dp[k][j])
#                     max_area = max(max_area, width * (i-k+1))
#         print(dp)
#         return max_area

#method2: Using Histograms - Stack O(NM)
        def helper(heights):
            stack = [-1]
            max_area = 0
            for i in range(len(heights)):
                while stack[-1] != -1 and heights[stack[-1]] >= heights[i]:
                    max_area = max(max_area, heights[stack.pop()]*(i-stack[-1]-1))
                stack.append(i)
                                   
            while stack[-1]!=-1:
                max_area = max(max_area, heights[stack.pop()]* (len(heights)- stack[-1]-1))
            return max_area 
                                   
        if not matrix: return 0
        max_area =0
        dp = [0]* len(matrix[0])
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                dp[j] = dp[j]+1 if matrix[i][j] == '1' else 0
            max_area = max(max_area, helper(dp))
        return max_area
        
                                   
