# 76. Minimum Window Substring
# Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).

# Example:

# Input: S = "ADOBECODEBANC", T = "ABC"
# Output: "BANC"
# Note:

# If there is no such window in S that covers all characters in T, return the empty string "".
# If there is such window, you are guaranteed that there will always be only one unique minimum window in S.

class Solution:
    def minWindow(self, s: str, t: str) -> str:
        
    #Method1. Sliding Window O(2*|S|+|T|) for worst case, otherwise, O(|S|+|T|)
#         if not s or not t:
#             return ""
        
#         dict_t = Counter(t)
#         # print(dict_t)
#         required = len(dict_t)
        
#         l,r = 0,0
#         formed = 0
#         window_counts = {}  #keep counts of current window
#         ans = float("inf"),None,None    #(window length, l, r)
        
#         while r < len(s):
#             # print("l,r, window_counts,ans",l,r,window_counts, ans)
#             character = s[r]
#             window_counts[character] = window_counts.get(character,0) +1
            
#             if character in dict_t and window_counts[character] == dict_t[character]:
#                 formed +=1
                
#             while l <=r and formed == required:
#                 # print(ans)
#                 character = s[l]
#                 if r-l+1 < ans[0]:
#                     ans = (r-l+1,l,r)
                    
#                 window_counts[character] -=1                
#                 if character in dict_t and window_counts[character] < dict_t[character]:
#                     formed -=1
                    
#                 l +=1
#             r+=1
            
#         if ans[0] == float("inf"):
#             return ""
#         else:
#             return s[ans[1]:ans[2]+1
    #Method2. Optimized Sliding Window
        if not s or not t:
            return ""
        dict_t = Counter(t)
        window_counts = {}
        ans = float("inf"),None,None
        l,r = 0,0
        filtered_s = []
        formed = 0
        for i,char in enumerate(s):
            if char in dict_t:
                filtered_s.append((i,char))
        required = len(dict_t)
        
        while r < len(filtered_s):
            character = filtered_s[r][1]
            window_counts[character] = window_counts.get(character,0)+1
            
            if window_counts[character] == dict_t[character]:
                formed +=1
            
            while l<=r and formed == required:
                character = filtered_s[l][1]
                end = filtered_s[r][0]
                first = filtered_s[l][0]
                if end-first +1 < ans[0]:
                    ans =  (end-first+1, first,end)
                
                window_counts[character]-=1
                if window_counts[character] < dict_t[character]:
                    formed -=1
                l+=1
            r+=1
        return "" if ans[0] == float("inf") else s[ans[1]:ans[2]+1]
