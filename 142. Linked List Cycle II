# 142. Linked List Cycle II
# Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

# To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.

# Note: Do not modify the linked list.



# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: ListNode) -> ListNode:
        
        if not head or not head.next:
            return None
        
        slow = fast = head
        slow = slow.next
        fast = fast.next.next
        while slow != fast:
            try:
                slow = slow.next
                fast = fast.next.next
            except:
                return None
        slow = head
        
        while slow != fast:
            slow = slow.next
            fast = fast.next
        return slow
