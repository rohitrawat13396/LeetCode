# 107. Binary Tree Level Order Traversal II

# Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

# For example:
# Given binary tree [3,9,20,null,null,15,7],
#     3
#    / \
#   9  20
#     /  \
#    15   7
# return its bottom-up level order traversal as:
# [
#   [15,7],
#   [9,20],
#   [3]
# ]

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:
        levels = []
        
        if not root:
            return levels
        def helper(root, level):
            if not root:
                return
            if len(levels)==level:
                levels.append([])
            levels[level].append(root.val)
            
            helper(root.left, level+1)
            helper(root.right, level+1)
            
            return levels
        
        return helper(root,0)[::-1]
            
            
