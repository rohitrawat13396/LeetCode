# 94. Binary Tree Inorder Traversal
# Given a binary tree, return the inorder traversal of its nodes' values.

# Example:

# Input: [1,null,2,3]
#    1
#     \
#      2
#     /
#    3

# Output: [1,3,2]
# Follow up: Recursive solution is trivial, could you do it iteratively?
    
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    #Method1 Recursive: O(n)
#     def inorderTraversal(self, root: TreeNode) -> List[int]:
#         result = []
#         self.recursive(root,result)
#         return result
    
#     def recursive(self, root,result):
#         if root != None:
#             if root.left!=None:
#                 self.recursive(root.left,result)
#             result.append(root.val)
#             if root.right!=None:
#                 self.recursive(root.right,result)
    
    #Method2. Stack with iteration O(n)
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        res = []
        stack = []
        curr = root
        while(curr!=None or stack):  
            # print(curr.val)
            while(curr!=None):
                stack.append(curr)
                curr = curr.left
            curr = stack.pop()
            res.append(curr.val)
            curr = curr.right
        return res
                
        
