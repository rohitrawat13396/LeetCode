# 23. Merge k Sorted Lists
# Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

# Example:

# Input:
# [
#   1->4->5,
#   1->3->4,
#   2->6
# ]
# Output: 1->1->2->3->4->4->5->6

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
from queue import PriorityQueue
class Solution:
    def mergeKLists(self, lists: List[ListNode]) -> ListNode:
        
        '''1.def mergelist(l1: ListNode, l2: ListNode):
            if l2 is None:
                return l1
            if l1 is None:
                return l2
            if l1.val <= l2.val:
                l1.next = mergelist(l1.next,l2)
                return l1
            else:
                l2.next = mergelist(l1,l2.next)
                return l2
        
        l1 = ListNode(float('-inf'))
        for l in lists:
            l1 = mergelist(l1,l)
            #print(l1)
        return l1.next'''
        
        '''2.head = point = ListNode(0)
        q = PriorityQueue()
        for l in lists:
            if l:
                q.put((l.val,l))
        print(q)
        while not q.empty():
            val,node = q.get()
            point.next = ListNode(val)
            point = point.next
            node = node.next
            if node:
                q.put((node.val,node))
            return head.next
         ''' 
        '''3.head = point = ListNode(0)
        l3 = []
        for l in lists:
            while l:
                l3.append(l.val)
                l = l.next
        for x in sorted(l3):
            point.next = ListNode(x)
            point = point.next
        return head.next'''
                
        def mergelist(l1: ListNode, l2: ListNode):  #4
            if l2 is None:
                return l1
            if l1 is None:
                return l2
            if l1.val <= l2.val:
                l1.next = mergelist(l1.next,l2)
                return l1
            else:
                l2.next = mergelist(l1,l2.next)
                return l2
        
        amount = len(lists)
        interval = 1
        if not lists:
            return
        while interval < amount:
            for i in range(0, amount - interval, interval * 2):
                lists[i] = mergelist(lists[i], lists[i + interval])
            interval *= 2
        return lists[0] if amount > 0 else lists
