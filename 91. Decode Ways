# 91. Decode Ways
# 'A' -> 1
# 'B' -> 2
# ...
# 'Z' -> 26

class Solution:
    def numDecodings(self, s: str) -> int:
        
#         valid_codes = \
#             {
#                 '1', '2', '3', '4', '5', '6', '7', '8', '9', '10',
#                 '11', '12', '13', '14', '15', '16', '17', '18',
#                 '19', '20', '21', '22', '23', '24', '25', '26'
#             }
#         if len(s) == 0 or s[0] == '0':
#             return 0
        
#         dp = [1, 1] + [0] * (len(s) - 1)
        
#         for k, char in enumerate(s[1:], 1):
#             dp_k = k + 1
#             if char == '0':
#                 if (s[k - 1:k + 1]) in valid_codes:
#                     dp[dp_k] = dp[dp_k - 2]
#                 else:
#                     return 0
#             elif (s[k - 1:k + 1]) in valid_codes:
#                 dp[dp_k] = dp[dp_k - 1] + dp[dp_k - 2]
#             else:
#                 dp[dp_k] = dp[dp_k - 1]
#         return dp[-1]

        #Method 1
        dp = [0]*(len(s)+1)
        dp[0] = 1
        if s[0] == "0":
            dp[1] = 0
        else:
            dp[1] = 1
        for i in range(2,len(dp)):
            if s[i-1]!= "0":
                dp[i]+= dp[i-1]
            two = int(s[i-2:i])
            if two >=10 and two<=26:
                dp[i] += dp[i-2]
            
        return dp[-1]
            
                
        
