# 300. Longest Increasing Subsequence

# Given an unsorted array of integers, find the length of longest increasing subsequence.

# Example:

# Input: [10,9,2,5,3,7,101,18]
# Output: 4 
# Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. 
# Note:

# There may be more than one LIS combination, it is only necessary for you to return the length.
# Your algorithm should run in O(n2) complexity.
# Follow up: Could you improve it to O(n log n) time complexity?
    
#Method0. DP in O(n^2)
class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        
        if not nums:
            return 0
        
        dp = [0]*len(nums)
        dp[0] = 1
        max_ans = 1
        for i in range(1,len(nums)):
            maxval = 0
            for j in range(0,i):
                if nums[i]> nums[j]:
                    maxval = max(maxval,dp[j])
            dp[i] = maxval +1
            max_ans = max(max_ans, dp[i])
            
        return max_ans
            
        
