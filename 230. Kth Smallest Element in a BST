# 230. Kth Smallest Element in a BST

# Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

 

# Example 1:

# Input: root = [3,1,4,null,2], k = 1
#    3
#   / \
#  1   4
#   \
#    2
# Output: 1
# Example 2:

# Input: root = [5,3,6,2,4,null,null,1], k = 3
#        5
#       / \
#      3   6
#     / \
#    2   4
#   /
#  1
# Output: 3
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def kthSmallest(self, root: TreeNode, k: int) -> int:
        if not root:
            return None
        self.k = k
        self.sol = 0
        def helper(root):
            if not root:
                return 
            if helper(root.left)!= None:
                return self.sol            
            if self.k > 1:
                self.k -=1
            else:
                self.sol = root.val
                return self.sol
            if helper(root.right)!= None:
                return self.sol
        return helper(root)

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def kthSmallest(self, root: TreeNode, k: int) -> int:
        
        self.k = k
        def inorder(root):
            if not root:
                return
            if root.left:                
                left = inorder(root.left)    
                if left!= None:
                    return left
                
            if self.k ==1:
                self.k -=1
                return root.val            
            self.k -= 1
            
            if root.right:                
                right = inorder(root.right)    
                if right!= None:
                    return right   
            return None
        
        return inorder(root)
    
#         stack = []
#         while True:
#             while root:
#                 stack.append(root)
#                 root = root.left
#             root =stack.pop()
#             k-=1
#             if not k:
#                 return root.val
#             root = root.right
      
                
    
        

        
