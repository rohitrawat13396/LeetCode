# 957. Prison Cells After N Days
# Input: cells = [0,1,0,1,1,0,0,1], N = 7
# Output: [0,0,1,1,0,0,0,0]
# Explanation: 
# The following table summarizes the state of the prison on each day:
# Day 0: [0, 1, 0, 1, 1, 0, 0, 1]
# Day 1: [0, 1, 1, 0, 0, 0, 0, 0]
# Day 2: [0, 0, 0, 0, 1, 1, 1, 0]
# Day 3: [0, 1, 1, 0, 0, 1, 0, 0]
# Day 4: [0, 0, 0, 0, 0, 1, 0, 0]
# Day 5: [0, 1, 1, 1, 0, 1, 0, 0]
# Day 6: [0, 0, 1, 0, 1, 1, 0, 0]
# Day 7: [0, 0, 1, 1, 0, 0, 0, 0]
class Solution:
    def prisonAfterNDays(self, cells: List[int], N: int) -> List[int]:
        seen = dict()
        is_ff = False
        
        while N>0:
            if not is_ff:
                key = tuple(cells)
                if key in seen:
                    N = N % (seen[key]-N)   #complete all the repetition cycle
                    is_ff = True
                else:
                    seen[key] = N
            if N>0:
                N -=1
                next_day = self.nextDay(cells)
                cells = next_day
        return cells
    
    def nextDay(self, cells):
        ret = [0]
        for i in range(1,len(cells)-1):
            ret.append(int(cells[i-1] == cells[i+1]))
        ret.append(0)
        return ret
                
                
            
            
