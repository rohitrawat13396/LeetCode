# 96. Unique Binary Search Trees
# Given n, how many structurally unique BST's (binary search trees) that store values 1 ... n?

# Example:

# Input: 3
# Output: 5
# Explanation:
# Given n = 3, there are a total of 5 unique BST's:

#    1         3     3      2      1
#     \       /     /      / \      \
#      3     2     1      1   3      2
#     /     /       \                 \
#    2     1         2                 3

# from math import factorial
class Solution:
    def numTrees(self, n: int) -> int:
        # print(self.factorial(n))
    # Method1. Catlan Number
        # return (factorial(2*n)//(factorial(n+1)*factorial(n)))
        
    # def factorial(self,n):
    #     if n==1:
    #         return 1        
    #     else:
    #         return self.factorial(n-1)*n
    
    #Method2. DP with O(n^2)
#         G = [0]*(n+1)
#         G[0],G[1] = 1,1

#         for i in range(2,n+1):
#             for j in range(1,i+1):
#                 G[i] += G[j-1]*G[i-j]
#         # print(G)
#         return G[n]
    #Method3. Catalan Number with Mathematical Induction : O(n)
        C= 1
        for i in range(n):
            C = C*2*(2*i+1)/(i+2)
        return int(C)
    
        
