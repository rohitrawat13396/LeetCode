# 994. Rotting Oranges
# In a given grid, each cell can have one of three values:

# the value 0 representing an empty cell;
# the value 1 representing a fresh orange;
# the value 2 representing a rotten orange.
# Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.

# Return the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.

# Input: [[2,1,1],[1,1,0],[0,1,1]]
# Output: 4
# Example 2:

# Input: [[2,1,1],[0,1,1],[1,0,1]]
# Output: -1
# Explanation:  The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
# Example 3:

# Input: [[0,2]]
# Output: 0
# Explanation:  Since there are already no fresh oranges at minute 0, the answer is just 0.
    
class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        
        rotten_coord = []
        fresh_coord = []
        count_of_orange = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 2:
                    rotten_coord.append((i,j))
                    count_of_orange +=1
                elif grid[i][j] == 1:
                    fresh_coord.append((i,j))
                    count_of_orange +=1

        minutes = 0           
        rotten_coord.append("")
        
        while len(rotten_coord) > 1 and fresh_coord:
            for coord in rotten_coord:
                if coord:
                    print(coord)
                    if coord[1] <len(grid[0])-1:
                        if (coord[0],coord[1]+1) in fresh_coord:
                                fresh_coord.remove((coord[0],coord[1]+1))
                                rotten_coord.append((coord[0],coord[1]+1))
                    if coord[1] > 0:
                        if (coord[0],coord[1]-1) in fresh_coord:
                                fresh_coord.remove((coord[0],coord[1]-1))
                                rotten_coord.append((coord[0],coord[1]-1))
                    if coord[0] > 0:
                        if (coord[0]-1,coord[1]) in fresh_coord:
                                fresh_coord.remove((coord[0]-1,coord[1]))
                                rotten_coord.append((coord[0]-1,coord[1]))
                    if coord[0] <len(grid)-1:
                        if (coord[0]+1,coord[1]) in fresh_coord:
                                fresh_coord.remove((coord[0]+1,coord[1]))
                                rotten_coord.append((coord[0]+1,coord[1]))
                else:
                    break
            rotten_coord = rotten_coord[rotten_coord.index("")+1:]
            rotten_coord.append("")
            minutes += 1
        if len(fresh_coord):
            return -1
        else:
            return minutes
        
    
        
        
        
