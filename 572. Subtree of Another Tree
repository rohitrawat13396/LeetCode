# 572. Subtree of Another Tree
# Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node's descendants. The tree s could also be considered as a subtree of itself.
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSubtree(self, s: TreeNode, t: TreeNode) -> bool:
        
        def check(s,t):
            stack = deque()
            stack.append((s,t))
            while stack:
                n1,n2 = stack.popleft()
                if not n1 and not n2:
                    continue
                if not n1 or not n2 or n1.val!= n2.val:
                    return False
                stack.append((n1.left,n2.left))
                stack.append((n1.right,n2.right))
            return True
                
        def dfs(root_s,root_t):
            if not root_s:
                return False
            if root_s.val == root_t.val:
                if check(root_s,root_t): 
                    return True
            return dfs(root_s.left,root_t) or dfs(root_s.right,root_t)
            
        
        return dfs(s,t)
        
                
        
